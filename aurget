#!/bin/bash
#
# pbrisbin 2013
#
###
AUR='https://aur.archlinux.org'

colorR="\e[1;31m"
colorG="\e[1;32m"
colorY="\e[1;33m"
colorB="\e[1;34m"
colorM="\e[1;35m"
colorC="\e[1;36m"
colorW="\e[1;37m"
nocolor="\e[0m"

arguments=()
dependencies=()

# Support {{{
die() { error $*; exit 1; }

info() { echo -e "${colorB}:: ${colorW}$*${nocolor}"; }

warn() { echo -e "${colorY}warning: ${nocolor}$*" >&2; }

error() { echo -e "${colorR}error: ${nocolor}$*" >&2; }

debug() {
  $debug || return

  echo -e "${colorW}[${colorC}DEBUG${colorW}]${nocolor} $*" >&2
}

err_no_targets() {
  if [[ "$opmode" == 'upgrade' ]]; then
    echo 'nothing to upgrade'
    exit 0
  else
    die 'no targets specified (use -h for help)'
  fi
}

# thanks Irm
url_encode() {
  echo "$*" \
    | hexdump -v -e '1/1 "%02x\t"' -e '1/1 "%_c\n"' \
    | LANG=C awk '
      $1 == "20"                   { printf("%s", "+"); next }
      $1 ~  /0[adAD]/              {                    next }
      $2 ~  /^[a-zA-Z0-9.*()\/-]$/ { printf("%s", $2);  next }
                                   { printf("%%%s", $1)      }
    '
}

aur_packages_url() {
  echo "$AUR/packages/$(url_encode "${1:0:2}")/$(url_encode "$1")"
}

aur_search_url() {
  echo "$AUR/rpc.php?type=search&arg=$(url_encode "$1")"
}

aur_info_url() {
  echo "$AUR/rpc.php?type=info&arg=$(url_encode "$1")"
}

aur_multiinfo_url() {
  local params=''

  for arg; do
    params+="&arg\[\]=$(url_encode "$arg")"
  done

  echo "$AUR/rpc.php?type=multiinfo$params"
}

get() { debug "HTTP GET $1"; curl -fsS "$1"; }

pkgbuild() { get "$(aur_packages_url $1)/PKGBUILD"; }

taurball() { get "$(aur_packages_url $1)/${1}.tar.gz"; }

rpc_search() { get "$(aur_search_url "$1")" | parse_rpc; }

rpc_info() { get "$(aur_info_url "$1")" | parse_rpc; }

rpc_multiinfo() { get "$(aur_multiinfo_url "$@")" | parse_rpc; }

parse_rpc() {
  awk -F '[^\\\\]"' -v RS='{"|,"|"}' '
    function unstring(str) {
      sub(/[^:]+:/, "", str)
      gsub(/\\\"/, "\"", str)
      gsub(/"$/, "", str)
      return substr(str, 2, length(str))
    }

    /Name":/        { printf "%s",    unstring($0) }
    /Version":/     { printf "|%s",   unstring($0) }
    /Description":/ { printf "|%s",   unstring($0) }
    /URL":/         { printf "|%s",   unstring($0) }
    /OutOfDate":/   { printf "|%s",   unstring($0) }
    /URLPath":/     { printf "|%s\n", unstring($0) }
  '
}

is_devel() { [[ "$1" =~ -(git|hg|svn|darcs|csv|bzr)$ ]]; }

is_ignored() { echo " $ignore_packages " | grep -Fq -- " $1 "; }

prompt() {
  local a

  echo -en "$*? [Y/n] "

  $noconfirm && { echo 'Y'; return 0; }

  read a

  case "${a:-y}" in
    y|Y) return 0      ;;
    q|Q) die "Aborted" ;;
    *)   return 1      ;;
  esac
}

prompt_to_edit() {
  local name="$1" pkgbuild="$2"; shift 2
  local reason="${*:-sourcing for deps}"

  [[ ! -f "$pkgbuild" ]] && die "$name: no PKGBUILD found"

  case "${edit_pkgbuilds:-prompt}" in
    never)  return 0 ;;
    prompt) prompt "Edit PKGBUILD before $reason" || return 0 ;;
  esac

  $EDITOR "$pkgbuild" || die 'problem editing PKGBUILD'
  prompt "Continue $reason"
}

discard_sources() {
  local name="$1"

  if ! $discard_sources; then
    debug 'keeping sources (discard false)'
    return
  fi

  if $keep_devels && is_devel "${name##*/}"; then
    debug 'keeping source (devel regex match)'
    return
  fi

  info 'Discarding sources...'
  rm -rf "./$name"
}

set_defaults() {
  debug=false
  devels=false
  discard_sources=true
  keep_devels=true
  makepkg='makepkg'
  makepkg_options='--syncdeps'
  noconfirm=false
  opmode='install'
  resolve_dependencies=false
  search_mode='search'
  sync_mode='build'

  EDITOR="${EDITOR:-$VISUAL}"
  EDITOR="${EDITOR:-vi}"
}

source_config() {
  local config="${XDG_CONFIG_HOME:-$HOME/.config}/aurgetrc"

  if [[ -r "$config" ]]; then
    debug "sourcing user config ($config)"
    source "$config"
  fi
}

create_temp_directory() {
  temp_directory="${temp_directory:-/tmp/aurget}"

  debug "storing temporary files in $temp_directory"

  mkdir -p "$temp_directory" || die 'unable to create temp directory'
  rm -rf "$temp_directory"/*
}

enter_build_directory() {
  build_directory="${build_directory:-$PWD}"

  debug "building in $build_directory"

  mkdir -p "$build_directory" || die 'unable to make build directory'
  cd "$build_directory"       || die 'unable to change to build directory'
}
# }}}

# Search {{{
execute_search() {
  local mode="$1"; shift

  debug "executing search for $@ (mode: $mode)"

  case "$mode" in
    search) do_search  "$*" ;;
    info)   do_info    "$@" ;;
    quiet)  rpc_search "$*" | sort | cut -d '|' -f 1 ;;
    print)  for name; do pkgbuild "$name"; done ;;
  esac
}

do_search() {
  local name version description outofdate ood

  while IFS='|' read -r name version description _ outofdate _; do
    [[ -z "$name" ]] && continue

    if [[ "$outofdate" =~ ^(1|OutOfDate)$ ]]; then
      ood="${colorR}[out of date]${nocolor}"
    fi

    ( echo -e "${colorM}aur/${colorW}$name ${colorG}$version${nocolor} $ood"
      echo -e "    ${description//\\\///}"
    ) 2>/dev/null

  done < <(rpc_search "$*" | sort)
}

do_info() {
  local name version description url outofdate url_path ood

  while IFS='|' read -r name version description url outofdate url_path; do
    [[ -z "$name" ]] && continue

    if [[ "$outofdate" =~ ^(1|OutOfDate)$ ]]; then
      ood="${colorR}Yes${nocolor}"
    else
      ood='No'
    fi

    ( echo -e "${colorW}Repository  : ${colorM}aur${nocolor}"
      echo -e "${colorW}Name        : $name${nocolor}"
      echo -e "${colorW}Version     : ${colorG}$version${nocolor}"
      echo -e "${colorW}URL         : ${colorC}${url//\\\///}${nocolor}"
      echo -e "${colorW}Out of date : ${nocolor}$ood"
      echo -e "${colorW}Description : ${nocolor}${description//\\\///}\n"
    ) 2>/dev/null

  done < <(rpc_multiinfo "$@" | sort)
}
# }}}

# Dependency handling {{{
source_pkgbuild() {
  local name="$1" pkgbuild="$temp_directory/${1}_PKGBUILD"

  # if the PKGBUILD's present, we've already processed this and should
  # return 1 to prevent re-processing
  [[ -f "$pkgbuild" ]] && return 1

  if ! pkgbuild "$name" > "$pkgbuild"; then
    touch "$pkgbuild"
    return 1
  fi

  if prompt_to_edit "$name" "$pkgbuild" "sourcing $name for dependencies"; then
    source "$pkgbuild"
    return 0
  fi

  return 1
}

resolve() {
  local name dep

  # global: dependencies[]

  for name; do
    debug "resolving $name, currently tracking ${#dependencies[@]} dependencies"

    if source_pkgbuild "$name"; then
      depends=($(pacman -T -- ${depends[@]} ${makedepends[@]}))
      depends=("${depends[@]%>*}")
      depends=("${depends[@]%=*}")
      depends=("${depends[@]%<*}")

      for dep in "${depends[@]}"; do
        resolve "$dep"
      done

      [[ ! " ${arguments[@]} " =~ " $name " ]] && dependencies+=( "$name" )
    fi
  done
}
# }}}

# Available upgrades {{{
available_upgrades() {
  local versions name version vers versN check

  declare -A versions

  while read -r name version; do
    if is_devel $name; then
      if $devels; then
        debug "including development package $name"
        echo "$name"
      fi
    else
      versions[$name]=$version
    fi
  done < <(pacman -Qm)

  while IFS='|' read -r name versN _; do
    vers="${versions[$name]}"

    read -r check < <(vercmp "$vers" "$versN")

    debug "checking $name (local: $vers, available: $versN)"

    (( $check > 0 )) && warn "$name: local ($vers) is newer than aur ($versN)"
    (( $check < 0 )) && echo "$name"

  done < <(rpc_multiinfo "${!versions[@]}")
}
# }}}

# Target handling {{{
set_targets() {
  local dep="$1"; shift
  local name version

  # global: versions[]
  # global: deps[]

  (( $# )) || return

  debug "setting targets for $@"

  info "Searching AUR..."

  while IFS='|' read -r name version _; do
    if is_ignored "$name"; then
      if ! prompt "$name is in ignore_packages. Install anyway"; then
        warn "skipping target: $name"
        continue
      fi
    fi

    if [[ -z "${versions[$name]}" ]]; then
      versions[$name]=$version
      deps[$name]=$dep
    fi
  done < <(rpc_multiinfo "$@")
}

process_targets() {
  local name version

  # global: versions[]
  # global: deps[]

  echo -en "\n${colorY}Targets (${#versions[@]}):${nocolor} "

  for name; do
    version=${versions[$name]}
    [[ -n "$version" ]] && echo -n "${name}-$version "
  done

  prompt "\n\nProceed with installation" || exit 0

  enter_build_directory

  [[ "$sync_mode" == 'install' ]] && makepkg_options+=' --install'

  for name; do
    [[ -n "${versions[$name]}" ]] && process_target "$name"
  done
}

process_target() {
  local name="$1"

  info 'Retrieving taurball from AUR...'

  if [[ "$sync_mode" == 'download' ]]; then
    debug "downloading $name to filesystem"

    if ! taurball "$name" > "${name}.tar.gz"; then
      warn "$name: failed to retrieve aur sources"
      return 1
    fi
  else
    debug "extracting $name directly"

    if ! taurball "$name" | tar xfz -; then
      warn "$name: failed to retrieve aur sources"
      return 1
    fi

    info 'Building package...'
    build_target "$name"
  fi
}

build_target() {
  local name="$1" pkgbuild

  # global: deps[]

  cd "$name" || die "$name: failed to change into source directory"

  if [[ -f "/etc/customizepkg.d/$name" ]]; then
    info 'Calling customizepkg...'
    customizepkg --modify || warn 'customizepkg had a problem'
  fi

  if prompt_to_edit "$name" 'PKGBUILD' "building $name"; then
    if (( ${deps[$name]} )); then
      debug "executing $makepkg $makepkg_options --asdeps"
      $makepkg $makepkg_options --asdeps || die "dependency package $name failed to build. unable to continue."
    else
      debug "executing $makepkg $makepkg_options"
      $makepkg $makepkg_options || warn "package $name failed to build."
    fi
  fi

  cd .. && discard_sources "$name"
}
# }}}

# Help message {{{
message() {
  cat << EOF
Usage: aurget [ -h | -S* [ --options ] [ -- ] <arguments> ]

  Options:

        -S  <package>   process <package> using your default sync_mode

        -Sd <package>   download <package>
        -Sb <package>   download and build <package>
        -Sy <package>   download, build, and install <package>

        -Su             process available upgrades using your default sync_mode

        -Sdu            download available upgrades
        -Sbu            download and build available upgrades
        -Syu            download, build, and install available upgrades

        -Ss  <term>     search aur for <term>
        -Ssq <term>     search aur for <term>, print only package names
        -Sp  <package>  print the PKGBUILD for <package>
        -Si  <package>  print extended info for <package>

        --devel         only affects -Su, add all development packages

        --deps          resolve dependencies
        --nodeps        don't resolve dependencies

        --edit          prompt to edit all pkgbuilds
        --noedit        don't prompt to edit any pkgbuilds

        --discard       discard source files after building
        --nodiscard     don't discard source files after building

        --ignore <package>
                        add additional packages to be ignored

        -h, --help      display this

  Any unrecognized options will be passed directly to makepkg.

EOF
}
# }}}

# Main {{{
set_defaults

source_config

while [[ -n "$1" ]]; do
  case "$1" in
    -S)            opmode='install'                                ;;
    -Sy)           opmode='install'; sync_mode='install'           ;;
    -Sb)           opmode='install'; sync_mode='build'             ;;
    -Sd)           opmode='install'; sync_mode='download'          ;;
    -Su)           opmode='upgrade'                                ;;
    -Syu|-Suy)     opmode='upgrade'; sync_mode='install'           ;;
    -Sbu|-Sub)     opmode='upgrade'; sync_mode='build'             ;;
    -Sdu|-Sud)     opmode='upgrade'; sync_mode='download'          ;;
    -Ss)           opmode='search' ; search_mode='search'          ;;
    -Ssq|-Sqs)     opmode='search' ; search_mode='quiet'           ;;
    -Si|-Ssi|-Sis) opmode='search' ; search_mode='info'            ;;
    -Sp|-Ssp|-Sps) opmode='search' ; search_mode='print'           ;;
    --ignore)      shift; ignore_packages+=" $1"                   ;;
    --noconfirm)   noconfirm=true; makepkg_options+=" --noconfirm" ;;
    --devel)       devels=true                                     ;;
    --deps)        resolve_dependencies=true                       ;;
    --nodeps)      resolve_dependencies=false                      ;;
    --edit)        edit_pkgbuilds='always'                         ;;
    --noedit)      edit_pkgbuilds='never'                          ;;
    --discard)     discard_sources=true                            ;;
    --nodiscard)   discard_sources=false                           ;;
    --debug)       debug=true                                      ;;
    -h|--help)     message; exit                                   ;;
    --)            shift; arguments+=( "$@" ); return              ;;
    -*)
      debug "unknown option $1, treating as makepkg argument..."
      makepkg_options+=" $1"
      ;;

    *) arguments+=( "$1" ) ;;
  esac

  shift
done

if [[ "$opmode" == 'search' ]]; then
  execute_search "$search_mode" "${arguments[@]}"
  exit $?
fi

create_temp_directory

if [[ "$opmode" == 'upgrade' ]]; then
  info 'Starting AUR upgrade...'
  arguments=( $(available_upgrades) "${arguments[@]}" )
fi

(( "${#arguments[@]}" )) || err_no_targets

declare -A versions
declare -A deps

if $resolve_dependencies; then
  info 'Resolving dependencies...'

  resolve "${arguments[@]}"

  set_targets 1 "${dependencies[@]}"
fi

set_targets 0 "${arguments[@]}"

process_targets "${dependencies[@]}" "${arguments[@]}"
# }}}
